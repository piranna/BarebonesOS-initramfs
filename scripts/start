#!/usr/bin/env bash

# This script compiles from scratch a Node.js executable and its needed
# libraries and shell utils to offer a Node.js REPL from cold boot


set -o pipefail


while getopts ":b:l:o:p:r:" opt; do
  case $opt in
    b)
      BINARY="$OPTARG"  # Location of the binary executable inside the initramfs
    ;;

    l)
      LINUX="$OPTARG"  # Location of the (probably patched) Linux kernel sources
    ;;

    o)
      OUT_INITRAM="$OPTARG"  # Location of the output initramfs image
    ;;

    p)
      BINARY_PATH="$OPTARG"  # Location of the binary executable
    ;;

    r)
      SRC_RELEASE="$OPTARG"  # Location of the OS release info file
    ;;
  esac
done

if [[ -z "$OUT_INITRAM" ]]; then
  echo "-o is mandatory"
  exit 1
fi

if [[ -z "$BINARY_PATH" ]]; then
  echo "-p is mandatory"
  exit 2
fi


if [[ -z "$BINARY" ]]; then
  BINARY=/bin/init
fi


TOOLCHAIN=`node -p "require('nodeos-cross-toolchain')"`

source $TOOLCHAIN/scripts/adjustEnvVars.sh || exit $?

PATH=$TOOLCHAIN/bin:$PATH


#
# Define source code paths
#

SRC_INIT=`pwd`/deps/init
LINUX=${LINUX:-`node -p "require('nodeos-linux')"`/linux}


#
# Define steps paths
#

OBJECTS=`mktemp -d`

OBJ_INIT=$OBJECTS/init
OBJ_RELEASE=$OBJECTS/os-release
OBJ_CPIO_TXT=$OBJECTS/cpio.txt
OBJ_GEN_INIT_CPIO=$OBJECTS/gen_init_cpio


#
# Build cross-compiler (if needed)
#

(
  cd $TOOLCHAIN

  LINUX=$LINUX                                                  \
  BITS=$BITS CPU=$CPU MACHINE=$MACHINE npm install --production || exit $?
) || exit $?


#
# init
#

SRC_DIR=$SRC_INIT
STEP_DIR=$OBJ_INIT

if [[ ! -f $STEP_DIR ]]; then
  echo -e "${WHT}Compiling init${CLR}"

  # Delete previous initramfs
  rm -rf $OUT_INITRAM

  (
#    cd $STEP_DIR
    cd $SRC_DIR && $MAKE clean  # nodeos-init don't support out-of-tree builds yet

    # Compile
    CC=$TARGET-gcc \
    $MAKE          || exit 10

    # Strip binary
    $TARGET-strip init || exit 11
  ) || err $?

  # Install
  mkdir -p `dirname $STEP_DIR` &&
  cp $SRC_DIR/init $STEP_DIR   || exit 12

  echo -e "${GRN}Successfully compiled init${CLR}"
fi


#
# OS release
#

STEP_DIR=$OBJ_RELEASE

if [[ ! -f $STEP_DIR ]]; then
  # Delete previous initramfs
  rm -rf $OUT_INITRAM

  mkdir -p `dirname $STEP_DIR`

  # Get info for 'os-release' file
  if [[ -f $SRC_RELEASE ]]; then
    source $SRC_RELEASE || err 20
  fi

  # Set default values for 'os-release' fields
  if [[ ! $VERSION_ID ]]; then
    VERSION_ID="(unknown)"
  fi

  if [[ $CODENAME ]]; then
    VERSION="$VERSION_ID \($CODENAME\)"
  else
    VERSION=$VERSION_ID
  fi

  if [[ ! $BUILD_ID ]]; then
    BUILD_ID=`node -p "(new Date()).toISOString().substr(0,10)"`
  fi

  # Set the 'os-release' file
  eval "echo \"$(< resources/os-release)\"" > $STEP_DIR || err 21
fi


#
# Generate initramfs configuration file
#

STEP_DIR=$OBJ_CPIO_TXT

if [[ ! -f $STEP_DIR ]]; then
  # Delete previous initramfs
  rm -rf $OUT_INITRAM

  mkdir -p `dirname $STEP_DIR`

  eval "echo \"$(< resources/cpio.txt)\"" > $STEP_DIR || err 30
fi


#
# gen_init_cpio
#

SRC_DIR=$LINUX
STEP_DIR=$OBJ_GEN_INIT_CPIO

if [[ ! -f $STEP_DIR ]]; then
  # Delete previous initramfs
  rmStep $OUT_INITRAM

  (
    cd $SRC_DIR/usr     &&
    $MAKE gen_init_cpio || exit 40

    mkdir -p `dirname $STEP_DIR` &&
    mv gen_init_cpio  $STEP_DIR  || exit 41
  ) || err $?
fi


#
# Generate initramfs
#

STEP_DIR=$OUT_INITRAM

if [[ ! -f $STEP_DIR ]]; then
  mkdir -p `dirname $STEP_DIR`                        &&
  $OBJ_GEN_INIT_CPIO $OBJ_CPIO_TXT | gzip > $STEP_DIR || err 50
fi
